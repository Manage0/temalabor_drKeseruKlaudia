import type { Message } from '@netlify/esbuild';
import type { NodeBundlerName } from '..';
import { FunctionConfig } from '../../../config';
import { FeatureFlag } from '../../../feature_flags';
import { FunctionSource } from '../../../function';
import { GetSrcFilesFunction } from '../../runtime';
declare type BundlerWarning = Message;
declare type CleanupFunction = () => Promise<void>;
declare type NativeNodeModules = Record<string, Record<string, string | undefined>>;
declare type BundleFunction = (args: {
    basePath?: string;
    config: FunctionConfig;
    featureFlags: Record<FeatureFlag, boolean>;
    pluginsModulesPath?: string;
    repositoryRoot?: string;
} & FunctionSource) => Promise<{
    aliases?: Map<string, string>;
    basePath: string;
    bundlerWarnings?: BundlerWarning[];
    cleanupFunction?: CleanupFunction;
    inputs: string[];
    mainFile: string;
    nativeNodeModules?: NativeNodeModules;
    nodeModulesWithDynamicImports?: string[];
    srcFiles: string[];
}>;
interface NodeBundler {
    bundle: BundleFunction;
    getSrcFiles: GetSrcFilesFunction;
}
declare const getBundler: (name: NodeBundlerName) => NodeBundler;
export { getBundler };
export type { BundleFunction, GetSrcFilesFunction, NativeNodeModules };
