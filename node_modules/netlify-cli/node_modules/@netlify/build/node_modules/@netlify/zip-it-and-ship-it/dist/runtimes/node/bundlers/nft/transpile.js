"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transpileMany = void 0;
const esbuild_1 = require("@netlify/esbuild");
const tmp_promise_1 = require("tmp-promise");
const fs_1 = require("../../../../utils/fs");
const bundler_target_1 = require("../esbuild/bundler_target");
const transpile = (path, config) => __awaiter(void 0, void 0, void 0, function* () {
    const targetPath = yield (0, tmp_promise_1.tmpName)({ postfix: '.js' });
    const cleanupFn = () => (0, fs_1.safeUnlink)(targetPath);
    // The version of ECMAScript to use as the build target. This will determine
    // whether certain features are transpiled down or left untransformed.
    const nodeTarget = (0, bundler_target_1.getBundlerTarget)(config.nodeVersion);
    yield (0, esbuild_1.build)({
        bundle: false,
        entryPoints: [path],
        format: 'cjs',
        logLevel: 'error',
        outfile: targetPath,
        platform: 'node',
        target: [nodeTarget],
    });
    return {
        cleanupFn,
        path: targetPath,
    };
});
const transpileMany = (paths, config) => __awaiter(void 0, void 0, void 0, function* () {
    const transpiledPaths = new Map();
    yield Promise.all(paths.map((path) => __awaiter(void 0, void 0, void 0, function* () {
        const transpiled = yield transpile(path, config);
        transpiledPaths.set(transpiled.path, path);
    })));
    return transpiledPaths;
});
exports.transpileMany = transpileMany;
//# sourceMappingURL=transpile.js.map