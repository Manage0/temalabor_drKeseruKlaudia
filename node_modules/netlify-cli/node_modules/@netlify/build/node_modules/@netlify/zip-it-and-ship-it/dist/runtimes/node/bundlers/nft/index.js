"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const nft_1 = require("@vercel/nft");
const resolve_dependency_1 = __importDefault(require("@vercel/nft/out/resolve-dependency"));
const minimatch_1 = __importDefault(require("minimatch"));
const unixify_1 = __importDefault(require("unixify"));
const fs_1 = require("../../../../utils/fs");
const base_path_1 = require("../../utils/base_path");
const included_files_1 = require("../../utils/included_files");
const transpile_1 = require("./transpile");
// Paths that will be excluded from the tracing process.
const ignore = ['node_modules/aws-sdk/**'];
const appearsToBeModuleName = (name) => !name.startsWith('.');
const bundle = ({ basePath, config, mainFile, pluginsModulesPath, repositoryRoot = basePath, }) => __awaiter(void 0, void 0, void 0, function* () {
    const { includedFiles = [], includedFilesBasePath } = config;
    const { exclude: excludedPaths, paths: includedFilePaths } = yield (0, included_files_1.getPathsOfIncludedFiles)(includedFiles, includedFilesBasePath || basePath);
    const { cleanupFunction, paths: dependencyPaths, transpilation, } = yield traceFilesAndTranspile({
        basePath: repositoryRoot,
        config,
        mainFile,
        pluginsModulesPath,
    });
    const filteredIncludedPaths = (0, included_files_1.filterExcludedPaths)([...dependencyPaths, ...includedFilePaths], excludedPaths);
    const dirnames = filteredIncludedPaths.map((filePath) => (0, path_1.normalize)((0, path_1.dirname)(filePath))).sort();
    // Sorting the array to make the checksum deterministic.
    const srcFiles = [...filteredIncludedPaths, ...transpilation.keys()].sort();
    return {
        aliases: transpilation,
        basePath: (0, base_path_1.getBasePath)(dirnames),
        cleanupFunction,
        inputs: dependencyPaths,
        mainFile,
        srcFiles,
    };
});
const ignoreFunction = (path) => {
    const normalizedPath = (0, unixify_1.default)(path);
    const shouldIgnore = ignore.some((expression) => (0, minimatch_1.default)(normalizedPath, expression));
    return shouldIgnore;
};
const traceFilesAndTranspile = function ({ basePath, config, mainFile, pluginsModulesPath, }) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const fsCache = {};
        const cache = {};
        const { fileList: dependencyPaths } = yield (0, nft_1.nodeFileTrace)([mainFile], {
            base: basePath,
            cache,
            ignore: ignoreFunction,
            readFile: (path) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const source = (yield (0, fs_1.cachedReadFile)(fsCache, path, 'utf8'));
                    return source;
                }
                catch (error) {
                    if (error.code === 'ENOENT' || error.code === 'EISDIR') {
                        return null;
                    }
                    throw error;
                }
            }),
            resolve: (specifier, parent, ...args) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, resolve_dependency_1.default)(specifier, parent, ...args);
                }
                catch (error) {
                    // If we get a `MODULE_NOT_FOUND` error for what appears to be a module
                    // name, we try to resolve it a second time using `pluginsModulesPath`
                    // as the base directory.
                    if (error.code === 'MODULE_NOT_FOUND' && pluginsModulesPath && appearsToBeModuleName(specifier)) {
                        const newParent = (0, path_1.join)(pluginsModulesPath, (0, path_1.basename)(parent));
                        return yield (0, resolve_dependency_1.default)(specifier, newParent, ...args);
                    }
                    throw error;
                }
            }),
        });
        const normalizedDependencyPaths = [...dependencyPaths].map((path) => basePath ? (0, path_1.resolve)(basePath, path) : (0, path_1.resolve)(path));
        // We look at the cache object to find any paths corresponding to ESM files.
        const esmPaths = [...(((_a = cache.analysisCache) === null || _a === void 0 ? void 0 : _a.entries()) || [])].filter(([, { isESM }]) => isESM).map(([path]) => path);
        // After transpiling the ESM files, we get back a `Map` mapping the path of
        // each transpiled to its original path.
        const transpilation = yield (0, transpile_1.transpileMany)(esmPaths, config);
        // Creating a `Set` with the original paths of the transpiled files so that
        // we can do a O(1) lookup.
        const originalPaths = new Set(transpilation.values());
        // We remove the transpiled paths from the list of traced files, otherwise we
        // would end up with duplicate files in the archive.
        const filteredDependencyPaths = normalizedDependencyPaths.filter((path) => !originalPaths.has(path));
        // The cleanup function will delete all the temporary files that were created
        // as part of the transpilation process.
        const cleanupFunction = () => __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([...transpilation.keys()].map(fs_1.safeUnlink));
        });
        return {
            cleanupFunction,
            paths: filteredDependencyPaths,
            transpilation,
        };
    });
};
const getSrcFiles = function ({ basePath, config, mainFile }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { includedFiles = [], includedFilesBasePath } = config;
        const { exclude: excludedPaths, paths: includedFilePaths } = yield (0, included_files_1.getPathsOfIncludedFiles)(includedFiles, includedFilesBasePath);
        const { fileList: dependencyPaths } = yield (0, nft_1.nodeFileTrace)([mainFile], { base: basePath, ignore: ignoreFunction });
        const normalizedDependencyPaths = [...dependencyPaths].map((path) => basePath ? (0, path_1.resolve)(basePath, path) : (0, path_1.resolve)(path));
        const includedPaths = (0, included_files_1.filterExcludedPaths)([...normalizedDependencyPaths, ...includedFilePaths], excludedPaths);
        return includedPaths;
    });
};
const bundler = { bundle, getSrcFiles };
exports.default = bundler;
//# sourceMappingURL=index.js.map