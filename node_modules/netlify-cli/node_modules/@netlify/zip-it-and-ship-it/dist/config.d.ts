import { FunctionSource } from './function';
import type { NodeBundler } from './runtimes/node';
declare type SupportedVersionNumbers = 8 | 10 | 12 | 14;
declare type NodeVersion = `${SupportedVersionNumbers}.x` | `nodejs${SupportedVersionNumbers}.x`;
interface FunctionConfig {
    externalNodeModules?: string[];
    includedFiles?: string[];
    includedFilesBasePath?: string;
    ignoredNodeModules?: string[];
    nodeBundler?: NodeBundler;
    nodeSourcemap?: boolean;
    nodeVersion?: NodeVersion;
    processDynamicNodeImports?: boolean;
    rustTargetDirectory?: string;
}
declare type GlobPattern = string;
declare type Config = Record<GlobPattern, FunctionConfig>;
declare const getConfigForFunction: ({ config, func, }: {
    config?: Config | undefined;
    func: Omit<FunctionSource, 'config'>;
}) => FunctionConfig;
export { getConfigForFunction };
export type { Config, FunctionConfig };
