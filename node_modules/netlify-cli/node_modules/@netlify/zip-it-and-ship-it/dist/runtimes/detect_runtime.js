"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectBinaryRuntime = void 0;
const elf_cam_1 = require("elf-cam");
const consts_1 = require("../utils/consts");
const fs_1 = require("../utils/fs");
// Try to guess the runtime by inspecting the binary file.
const detectBinaryRuntime = function ({ fsCache, path }) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const buffer = yield (0, fs_1.cachedReadFile)(fsCache, path);
            // We're using the Type Assertion because the `cachedReadFile` abstraction
            // loses part of the return type information. We can safely say it's a
            // Buffer in this case because we're not specifying an encoding.
            const binaryType = (0, elf_cam_1.detect)(buffer);
            if (binaryType === undefined) {
                return;
            }
            return RUNTIMES[binaryType];
        }
        catch (error) { }
    });
};
exports.detectBinaryRuntime = detectBinaryRuntime;
const RUNTIMES = {
    [elf_cam_1.Runtime.Go]: consts_1.RUNTIME_GO,
    [elf_cam_1.Runtime.Rust]: consts_1.RUNTIME_RUST,
};
//# sourceMappingURL=detect_runtime.js.map